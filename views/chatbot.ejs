<!-- N√∫t b·∫≠t/t·∫Øt chat -->
<button id="chatbot-toggle">üí¨</button>

<!-- Khung chat -->
<div id="chatbot-window">
  <div id="chatbot-header">
    <div class="avatar">ü§ñ</div>
    <span>Tr·ª£ l√Ω ·∫£o</span>
  </div>
  <div id="chatbot-messages" class="messages-container"></div>
  <div id="chatbot-input">
    <input type="text" id="user-input" placeholder="Nh·∫≠p tin nh·∫Øn..." />
    <button id="send-btn">
      <span>G·ª≠i</span>
      <span>‚û§</span>
    </button>
  </div>
</div>

<style>
  * {
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  #chatbot-toggle {
    position: fixed;
    bottom: 100px;
    right: 20px;
    background-color: #0d6efd;
    color: white;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 28px;
    cursor: pointer;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
    transition: background-color 0.3s;
    z-index: 1000;
  }

  #chatbot-toggle:hover {
    background-color: #0b5ed7;
  }

  #chatbot-window {
    position: fixed;
    bottom: 170px;
    right: 20px;
    width: 340px;
    height: 480px;
    background: #f8f9fa;
    border-radius: 16px;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    overflow: hidden;
    border: 1px solid #dee2e6;
    z-index: 1000;
  }

  #chatbot-header {
    background: #0d6efd;
    color: white;
    padding: 15px;
    font-weight: bold;
    font-size: 16px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  #chatbot-messages {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
    background-color: #fff;
    display: flex;
    flex-direction: column;
  }

  .message-container {
    display: flex;
    align-items: flex-start;
    margin: 8px 0;
    gap: 8px;
    width: 100%;
  }

  .message-container.user {
    flex-direction: row-reverse;
  }

  .avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    flex-shrink: 0;
  }

  .bot .avatar {
    background-color: #0d6efd;
    color: white;
  }

  .message {
    padding: 8px 12px;
    border-radius: 15px;
    line-height: 1.4;
    word-wrap: break-word;
    max-width: calc(100% - 50px);
    white-space: pre-wrap;
  }

  .user .message {
    background-color: #e9ecef;
    border-bottom-right-radius: 5px;
  }

  .bot .message {
    background-color: #0d6efd;
    color: white;
    border-bottom-left-radius: 5px;
  }

  .typing-indicator {
    display: flex;
    gap: 4px;
    padding: 8px 12px;
  }

  .typing-dot {
    width: 8px;
    height: 8px;
    background: #0d6efd;
    border-radius: 50%;
    animation: typing 1s infinite ease-in-out;
  }

  .typing-dot:nth-child(2) { animation-delay: 0.2s; }
  .typing-dot:nth-child(3) { animation-delay: 0.4s; }

  @keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
  }

  #chatbot-input {
    display: flex;
    border-top: 1px solid #ccc;
    background: #fff;
    padding: 10px;
  }

  #chatbot-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 20px;
    outline: none;
    font-size: 14px;
    margin-right: 10px;
    transition: border-color 0.2s;
  }

  #chatbot-input input:focus {
    border-color: #0d6efd;
  }

  #chatbot-input button {
    background: #0d6efd;
    color: white;
    border: none;
    border-radius: 20px;
    padding: 10px 16px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
    display: flex;
    align-items: center;
    gap: 5px;
  }

  #chatbot-input button:hover {
    background: #0b5ed7;
  }

  .error-message {
    color: #dc3545;
    font-size: 12px;
    padding: 8px 12px;
    background: #f8d7da;
    border-radius: 10px;
    margin: 4px 0;
  }
</style>

<script>
  const toggleBtn = document.getElementById("chatbot-toggle");
  const chatWindow = document.getElementById("chatbot-window");
  const messages = document.getElementById("chatbot-messages");
  const userInput = document.getElementById("user-input");
  const sendBtn = document.getElementById("send-btn");

  toggleBtn.addEventListener("click", () => {
    chatWindow.style.display = chatWindow.style.display === "none" ? "flex" : "none";
    if (chatWindow.style.display === "flex") {
      userInput.focus();
    }
  });

  sendBtn.addEventListener("click", async () => {
    const msg = userInput.value.trim();
    if (!msg) return;

    appendMessage("user", msg);
    userInput.value = "";

    // Hi·ªÉn th·ªã typing indicator
    const typingContainer = document.createElement("div");
    typingContainer.className = "message-container bot";
    typingContainer.innerHTML = `
      <div class="avatar">ü§ñ</div>
      <div class="typing-indicator">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    `;
    messages.appendChild(typingContainer);
    messages.scrollTop = messages.scrollHeight;

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: msg }),
      });

      // X√≥a typing indicator
      messages.removeChild(typingContainer);

      const data = await response.json();
      if (data.error) {
        appendErrorMessage(data.error);
      } else {
        appendMessage("bot", data.reply || "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.");
      }
    } catch (error) {
      // X√≥a typing indicator
      messages.removeChild(typingContainer);
      appendErrorMessage("L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß");
    }
  });
  
  userInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      sendBtn.click();
    }
  });

  function appendMessage(sender, text) {
    const container = document.createElement("div");
    container.className = `message-container ${sender}`;
    
    const avatar = document.createElement("div");
    avatar.className = "avatar";
    avatar.textContent = sender === "user" ? "üë§" : "ü§ñ";

    const messageDiv = document.createElement("div");
    messageDiv.className = "message";
    messageDiv.textContent = text || "...";

    container.appendChild(avatar);
    container.appendChild(messageDiv);
    messages.appendChild(container);
    messages.scrollTop = messages.scrollHeight;
  }

  function appendErrorMessage(text) {
    const div = document.createElement("div");
    div.className = "error-message";
    div.textContent = text;
    messages.appendChild(div);
    messages.scrollTop = messages.scrollHeight;
  }
</script> 